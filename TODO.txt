Packaging
---------
 * Should do the packaging and class stuff properly; install into the
   Python library dir, etc.
 * Windows / OSX packaging

Data
----
 * Figure out the rest of our unknown values
 * Figure out our unknown item types
 * Figure out what other bit flags there might be ("visibility" probably
   isn't just an int)
 * Figure out details of the visual effects values (some of that is
   probably bit flags as well)
 * Figure out where in the world current-map and actual position information
   is kept (aha!  this is in 'saveneme' I bet.  I suspect that quest status is
   also kept in there...)
 * Cloud overlay stuff?  Like in Vela?

Character GUI
-------------
 * Implement the "Unknowns" screen
 * Highlight the Inventory Notebook labels when there's a change in one
   of them
 * Support old AND new Tooltip style, so this doesn't break with PyGTK 3.0
 * Mouseover notification of previous values (for changed values)
 * Figure out default save file location on Windows/Cygwin/Darwin, and how
   to get at them
 * (and CLI, actually) - show some more useful messages when a file can't
   be loaded

Map GUI
-------
 * Separate thread to pre-cache tiles in map editor, for "instantaneous" state
   flips?
 * Status bars for functions aren't basically instantaneous
 * Confirmation on close when there's been changes
 * Warning/abort if trying to edit square with an unknown entity
 * Check for luminosity...  Light in square in Blackwater, for instance
 * Implement a 'question mark' or something for invalid tiles/entities
 * Should the 'friendly' field just be a checkbox?
 * Dragging to move map
 * Square rendering seems to be getting a bit slow; should see if
   there's anything to be done about that.
 * It turns out that technically we need to draw the map in multiple
   passes - first ground, then objects, etc (apparently including entities
   in with objects, not separately)  Tent graphics, for instance, get
   partially munged using our current method.

Internal
--------
 * We're doubly-caching some widgets in the character GUI code, which is
   stupid.  Should consolidate those.
 * A whole lot of code-cleaning should really be done, it's pretty spaghetti
   in there.
 * Classes have been moved to new-style classes but for the most part aren't
   taking advantage of the benefits of doing so.
